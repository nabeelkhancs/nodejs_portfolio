const validator = require('validator');
const path = require('path');
const Product = require('../models/Product');
const ProductCategories = require('../models/ProductCategory');
const barcodeHelper = require('../helpers/barcode-functions');
const autGeneratedBarcode = require('../models/AutoGeneratedBarcodes');
const Pricing = require('../models/Pricing');
const Inventory = require('../models/Inventory');
const uuid = require('uuid').v1;

module.exports.products_get = async (req, res, next) => {
	const currentUser = req.user;
	const inventories = await Inventory.find({ locationId: req.user.locationId }).populate({ 
		path: 'productId',
		populate: {
			path: 'categoryId'
		} 
 });
//  console.log(inventories.map(x => x.productId.categoryId));
	res.locals = {
		...res.locals,
		page: 'products/list',
		pageData: {
			inventories,
			currentUser,
			pageName: 'productList'
		},
		status: 200,
		data: {
			inventories,
			currentUser
		}
	}
	next();
}

module.exports.addProduct_get = async (req, res, next) => {
	// console.log(req.user);
	const categories = await ProductCategories.find();

	res.locals = {
		...res.locals,
		page: 'products/add',
		pageData: {
			categories,
			pageName: 'addProducts'
		},
		status: 200,
		data: categories
	}
	next();
}


module.exports.products_post = async (req, res, next) => {

	const error = [];
	const name = req.body.name ? req.body.name.trim() : '';
	let barcode = req.body.barcode ? req.body.barcode.trim() : '';
	const barcodeType = req.body.barcodeType ? req.body.barcodeType.trim() : '';
	const categoryId = req.body.categoryId ? req.body.categoryId.trim() : '';
	const unitOfMeasure = req.body.unitOfMeasure ? req.body.unitOfMeasure.trim() : '';
	const alertQuantity = req.body.alertQuantity ? req.body.alertQuantity.trim() : '';
	const locationId = req.user.locationId;

	// Validaton
	if (validator.isEmpty(name)) {
		error.push({ msg: 'Name is required' });
	}

	if (validator.isEmpty(barcode)) {
		const lastBarcode = await barcodeHelper.findLastBarcode();
		// console.log(" kch" + lastBarcode);
		if (!lastBarcode)
			barcode = "00000001";
		else {
			barcode = +lastBarcode + 1;
			barcode = barcode.toString().padStart(8, "0");
		}
	}

	if (error.length) {

		let [products, categories] = await Promise.all([Product.find(), ProductCategories.find()]);
		res.locals = {
			...res.locals,
			page: 'products/add',
			pageData: {
				products,
				categories,
				pageName: 'addProducts'
			},
			status: 200,
			data: {
				products,
				categories
			}
		}
		next();
	}

	// Image Handling
	const fileExtension = /\.[0-9a-z]{1,5}$/i.exec(req.files.image.name)[0];
	const fileName = uuid();
	const fullFileName = fileName + fileExtension;
	const iconPath = path.resolve(__dirname, `../public/images/products/${fullFileName}`);

	req.files.image.mv(iconPath, async (err) => {
		if (err) {
			console.log(err);
			res.redirect('/products/add');
		} else {
			// Processing
			const newProduct = new Product({
				name,
				barcode,
				categoryId,
				unitOfMeasure,
				alertQuantity,
				image: fullFileName
			});
			const newAutoGeneratedBarcode = new autGeneratedBarcode({
				barcodeNumber: barcode,
				productId: newProduct._id
			});
			const newInventory = new Inventory({
				productId: newProduct.id,
				stock: 0,
				locationId
			})
			await newInventory.save();

			await newProduct.save();
			await newAutoGeneratedBarcode.save();

			res.locals = {
				...res.locals,
				flash: 'Product Added Successfuly',
				redirect: '/products',
				status: 200
			}
			next();
		}
	});
}

module.exports.product_delete = async (req, res, next) => {
	const id = req.params.id;
	const product = await Product.findByIdAndDelete(id);

	req.flash('success_msg', 'Product is Deleted Successfuly!');
	res.redirect('/products/');
}

module.exports.product_edit = async (req, res, next) => {
	const id = req.params.id;
	let [product, categories] = await Promise.all([Product.findById(id), ProductCategories.find()])

	res.locals = {
		...res.locals,
		page: 'products/edit',
		pageData: {
			product,
			categories,
			pageName: 'addProducts'
		},
		status: 200,
		data: {
			product,
			categories
		}
	}
	next();
}
module.exports.product_update = async (req, res) => {
	const error = [];
	const id = req.body.id;
	const name = req.body.name ? req.body.name.trim() : '';
	const categoryId = req.body.categoryId ? req.body.categoryId.trim() : '';
	const unitOfMeasure = req.body.unitOfMeasure ? req.body.unitOfMeasure.trim() : '';
	const alertQuantity = req.body.alertQuantity ? req.body.alertQuantity.trim() : '';

	// Validaton
	if (validator.isEmpty(name)) {
		error.push({ msg: 'Name is required' });
	}

	let updateProduct = {
		name,
		categoryId,
		unitOfMeasure,
		alertQuantity
	}

	await Product.findByIdAndUpdate(id, updateProduct);

	req.flash('success_msg', 'Product Updated');
	res.redirect('/products/');

}

//=========================Product Categories============================//

module.exports.productCategories_get = async (req, res) => {
	const categories = await ProductCategories.find();
	res.render('products/categories', {
		categories,
		pageName: 'productCategories'
	})
}

module.exports.productCategories_post = async (req, res) => {
	const errors = [];
	const name = req.body.name ? req.body.name.trim() : "";
	const description = req.body.description ? req.body.description.trim() : "";

	if (validator.isEmpty(name)) {
		errors.push({ msg: 'Name is required' });
	}

	const newCategory = new ProductCategories({
		name,
		description
	});

	await newCategory.save();
	req.flash('success_msg', 'Product Category Successfully Added!');
	res.redirect('/products/categories');

}

module.exports.productCategory_delete = async (req, res) => {
	const id = req.params.id;
	const category = await ProductCategories.findByIdAndDelete(id);

	req.flash('success_msg', 'Category is successfully deleted');
	res.redirect('/products/categories');
}

// =========================================================== //

// ==============================PRINT BARCODES============================= //

module.exports.printLabel_get = async (req, res, next) => {
	const id = req.params.id;
	const products = await Product.find();

	res.locals = {
		...res.locals,
		page: 'products/printLabels',
		pageData: {
			products,
			pageName: 'printLabels',
		},
		status: 200,
		data: products
	}
	next();
}


module.exports.generateBarcode_post = async (req, res, next) => {
	const productId = req.body.productId ? req.body.productId.trim() : "";
	const quantity = req.body.quantity ? req.body.quantity.trim() : "";
	const width = req.body.width ? req.body.width.trim() : "";
	const height = req.body.height ? req.body.height.trim() : "";
	const product = await Product.findById(productId);
	res.locals = {
		...res.locals,
		page: 'products/generateBarcodes',
		pageData: {
			product,
			quantity,
			width,
			height
		},
		status: 200,
		data: {
			product,
			quantity,
			width,
			height
		}
	}
	next();
}
// ========================================================================= //

// ==============================SALE PRICING ============================= //

module.exports.pricing_get = async (req, res, next) => {

	const pricings = await Pricing.find().populate('productId');
	const products = await Product.find();

	res.locals = {
		...res.locals,
		page: 'products/pricing',
		pageData: {
			products,
			pricings,
			pageName: 'pricing'
		},
		status: 200,
		data: pricings
	}
	next();
}


module.exports.pricing_post = async (req, res, next) => {

	const productId = req.body.productId ? req.body.productId.trim() : "";
	const where = { productId };
	const type = req.body.type ? req.body.type.trim() : "";
	const price = req.body.price ? req.body.price.trim() : "";

	const alreadyExists = await Pricing.findOne(where);

	if(alreadyExists){
	res.locals = {
		...res.locals,
		flash: "This product's pricing already exists",
		redirect: '/products/pricing',	
		status: 200,
	};
	return next();
	}

	const newPricing = new Pricing(
		{
			productId,
			pricingType: type,
			price
		}
	);

	await newPricing.save();

	res.locals = {
		...res.locals,
		flash: "Pricing added successfuly",
		redirect: '/products/pricing',
		status: 200,
	},
		next();
}

module.exports.pricing_delete = async (req, res, next) => {
	const id = req.params.id;
	await Pricing.findByIdAndDelete(id);

	res.locals = {
		...res.locals,
		flash: "Pricing os deleted Successfuly",
		redirect: '/products/pricing',
		status: 200,
	},
		next();
}

module.exports.productPrint_get  = async (req, res, next) => {
	const id = req.params.id;
	const currentUser = req.user;
	const inventories = await Inventory.find({ productId: id}).populate('productId').populate('locationId');
	const product = await Product.findById(id);
	res.locals = {
		...res.locals,
		page: 'products/print',
		pageData: {
			product,
			inventories,
			currentUser
		},
		status: 200,
		data: {
			product,
			inventories,
			currentUser
		}
	}
	next();	
}