const validator = require('validator');
const Product = require('../models/Product');
const ProductCategory = require('../models/ProductCategory');
const Inventory = require('../models/Inventory');
const Customer = require('../models/Customer');
const stockNumber = require('../helpers/stockNumber');
const StockId = require('../models/AutoGeneratedStockId')

module.exports.recievedInventory_get = async (req, res) => {
	products = await Product.find().populate('categoryId');
	
	res.render('inventory/recieved', {
		products
	})
}

module.exports.washingInventory_get = async (req, res) => {
	products = await Product.find().populate('categoryId');
	
	res.render('inventory/washing', {
		products
	})
}
module.exports.dyingInventory_get = async (req, res) => {
	products = await Product.find().populate('categoryId');
	
	res.render('inventory/dying', {
		products
	})
}
module.exports.shippedInventory_get = async (req, res) => {
	products = await Product.find().populate('categoryId');
	customers = await Customer.find();
	res.render('inventory/shipping', {
		products,
		customers
	})
}

module.exports.recievedInventory_post = async (req, res) => {

	const lastStockId = await stockNumber.findLastStockId();
	if (!lastStockId || lastStockId == "undefined")
		stockId = "00000001";
	else {
		stockId = +lastStockId + 1;
		stockId = stockId.toString().padStart(8, "0");
	}

	// console.log(stockId)
	
	products = await Product.find().populate('categoryId');
	const inventoryData = req.body.inventoryData; //ye undefined araha h
	const newInventoryData = inventoryData.map(x => ({...x, stockId: stockId}))
	// console.log(newInventoryData);
	const newStockId = new StockId({
		stockId: stockId,
		date: new Date
	});
	await newStockId.save();
	Inventory.insertMany(newInventoryData);

	res.redirect('/stock');

}

module.exports.washingInventory_post = async (req, res) => {
	const inventoryData = req.body.inventoryData; 
	const washingDate = req.body.washingDate;

	for(var i=0; i<inventoryData.length; i++){
		await Inventory.findOneAndUpdate(
			{rfid: inventoryData[i].rfid, status: 'recieved'},
			{$set:	{status: 'washing', washingDate: washingDate}	}
		);
	}
	// console.log(inventoryData);
	res.redirect('/stock');

}

module.exports.dyingInventory_post = async (req, res) => {
	const inventoryData = req.body.inventoryData; 
	const dyingDate = req.body.dyingDate;
	for(var i=0; i<inventoryData.length; i++){
		await Inventory.findOneAndUpdate(
			{rfid: inventoryData[i].rfid, status: 'washing'},
			{$set:	{status: 'dying', dyingDate: dyingDate}	}
		);
	}
	// console.log(inventoryData);
	res.redirect('/stock');

}

module.exports.shippedInventory_post = async (req, res) => {
	const inventoryData = req.body.inventoryData; 
	const shippedDate = req.body.shippedDate;
	const shippedTo = req.body.shippedTo;
	console.log(shippedTo);
	for(var i=0; i<inventoryData.length; i++){
		await Inventory.findOneAndUpdate(
			{rfid: inventoryData[i].rfid, status: 'dying'},
			{$set:	{status: 'shipped', shippedDate: shippedDate, shippedTo: shippedTo}	}
		);
	}
	// console.log(inventoryData);
	res.redirect('/stock');

}

//================================================

module.exports.stock_get = async (req, res) => {
	const stocks = await StockId.find();
	res.render('inventory/stock', {
		stocks
	});
}

module.exports.stockDetails_get = async (req, res) => {
	id = req.params.id;
	const inventory = await Inventory.find({ stockId: id }).populate('shippedTo');
	console.log(inventory);
	res.render('inventory/stockDetails', {
		inventory
	});
}

module.exports.reports_get = async (req, res) => {
	res.render('inventory/reports')
}

module.exports.generateReports_get = async (req, res) => {
	const status = req.body.status ? req.body.status.trim() : "";
	let fromDate = req.body.fromDate ? req.body.fromDate.trim() : "";
	let toDate = req.body.toDate ? req.body.toDate.trim() : "";
	toDate = new Date(toDate);
	fromDate = new Date(fromDate);
	fromDate.setHours(0,0,0,0);
	toDate.setHours(59,59,59,59);
	if(status == 'recieved'){
		var data = await Inventory.find({ status: 'recieved', recievedDate: { $gte:fromDate, $lte: toDate } }).populate('shippedTo');
	}
	else if(status == 'washing'){
		var data = await Inventory.find({ status: 'washing', washingDate: { $gte:fromDate, $lte: toDate } }).populate('shippedTo');
	}
	else if(status == 'dying'){
		var data = await Inventory.find({ status: 'dying', dyingDate: { $gte:fromDate, $lte: toDate } }).populate('shippedTo');
	}
	else if(status == 'shipped'){
		var data = await Inventory.find({ status: 'shipped', shippedDate: { $gte:fromDate, $lte: toDate } }).populate('shippedTo');
	}
	// console.log(data[0].shippedTo);
	res.render('inventory/generateReport',{
		data,
		status,
		fromDate,
		toDate,
	})

	// console.log(data);
}